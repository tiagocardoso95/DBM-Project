var express = require('express');
var router = express.Router();
var fs = require("fs");

{{#schemas}}
var {{schemaName}} = require('../Models/{{schemaName}}.js').{{schemaName}};
{{/schemas}}


{{#schemas}}
router.get('/{{schemaName}}', function(req, res){
    {{schemaName}}.all(function(rows){
        var schema = JSON.parse(fs.readFileSync("Schemas/" + "{{{schemaName}}}".toLowerCase()+ "-schema.json"));
        res.render('list', {
            title: '{{schemaName}}s',
            columns: Object.keys(new {{schemaName}}()).map(key => {
                return {
                    name: getPropertyLabel(schema,key)
                };
            }),
            rows: rows.map(obj => {
                return {
                    properties: Object.keys(obj).map(key => {
                        return {
                            name: key,
                            value: obj[key]
                        }
                    }),
                    actions: [{
                        label: '',
                        link: './{{schemaName}}/detalhe/' + obj.id,
                        image: {
                            src: '../Images/read.png'
                        },
                        tooltip: 'Detalhe'
                    }, {
                        label: '',
                        link: './{{schemaName}}/editar/' + obj.id,
                        image: {
                            src: '../Images/edit.png'
                        },
                        tooltip: 'Editar'
                    }, {
                        label: '',
                        link: '#',
                        image: {
                            src: '../Images/delete.png'
                        },
                        tooltip: 'Apagar',
                        events: [{
                            name: "onclick",
                            function: "deleteRecord",
                            args: obj.id
                        }]

                    }]
                }
            })
        });
    });  
});

router.get('/{{schemaName}}/detalhe/:id', function(req, res){
    var schema = JSON.parse(fs.readFileSync("Schemas/" + "{{{schemaName}}}".toLowerCase()+ "-schema.json"));
    {{schemaName}}.get(req.params.id, function(rows){
        res.render('details', {
            properties: function () {
                var allProps = Object.getOwnPropertyNames(rows);
                var validProps = [];
                allProps.forEach(function (prop) {
                    if (schema.properties.hasOwnProperty(prop)){
                    validProps.push({
                        name: prop,
                        value: rows[prop]
                    });
                }  
            });
            return validProps;
            },
            references: function () {
                var allRefs = [];
                if (schema.references){
                    schema.references.forEach(function (ref) {
                        allRefs.push({
                            label: ref.label,
                            model: "{{schemaName}}",
                            values: ref.relation === "M-M" ? ref.model + '/' +  req.params.id : rows[(ref.model + "_id").toLowerCase()] 
                        });
                    });
                }
                return allRefs;
            },
            get hasReferences(){
                return this.references().length > 0;
            }
        })
    });
});


router.get('/{{schemaName}}/editar/:id', function(req, res){
    {{schemaName}}.get(req.params.id, function(rows){
        if(rows){ 
            var schema = JSON.parse(fs.readFileSync("Schemas/" + "{{{schemaName}}}".toLowerCase()+ "-schema.json"));
            var keys = Object.keys(schema.properties);
           
            let props = rows.map(obj => {
                        return {
                             values: Object.keys(obj).map(key => {
                                return {
                                    name: getPropertyLabel(schema,key).replace(/ /g,''),
                                    value: (schema.properties[key].type === 'date') ? new Date(obj[key]).toISOString().substring(0, 10) : obj[key],
                                    typeInput: convertType(schema.properties[key].type),
                                    hidden: (key === 'id') ? 'hidden' : '',
                                }
                            })
                        }
                    })
            console.log(props);
            res.render('form', {
                    method: 'POST',
                schemaName: '{{schemaName}}',
                properties: props[0].values,
                id: req.params.id,
            });
        }
    }
)});

router.get('/{{schemaName}}/insert', function (req, res){
    var schema = JSON.parse(fs.readFileSync("Schemas/" + "{{{schemaName}}}".toLowerCase()+ "-schema.json"));
    var keys = Object.keys(schema.properties);
    
    res.render('form',{
        method: 'POST',
        schemaName: '{{schemaName}}',
        properties: keys.map(elem => {
            return {
                name: schema.properties[elem].label.replace(/ /g,''),
                value: undefined,
                typeInput: convertType(schema.properties[elem].type),
                hidden: (elem === 'id') ? 'hidden' : '',
            }
        })
    });
});


{{/schemas}}

function convertType(type) {
    switch (type) {
        case 'string':
            return 'text';
        default:
            return type;
    }
}

function getPropertyLabel(schema, property){
    if(schema.properties[property] != null){
        return schema.properties[property].label;
    }else{
        for(var i=0; i<schema.references.length; i++){
            if(schema.references[i].relation === '1-M'){
                if(schema.references[i].columnName === property){
                    return schema.references[i].model;
                }
            }
        }       
    }   
    return "";
}

function getPropertyType(schema, property){
    if(schema.properties[property] != null){
        if(property.includes("date")){
            return "date";
        }else if(schema.properties[property].type === 'string'){
            return "text";
        }else{
            return "number";
        }
    }
}

module.exports = router;